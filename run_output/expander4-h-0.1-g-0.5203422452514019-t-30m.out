time -o run_output/expander4-h-0.1-g-0.5203422452514019-t-30m.out.time timeout 30m cmake-build-debug/a.out -f graphs/expander4.graph  -r 30 -s --H_phi=0.1 --G_phi=0.5203422452514019 --vol 0.1 -o run_output/expander4-h-0.1-g-0.5203422452514019-t-30m.ptn >> run_output/expander4-h-0.1-g-0.5203422452514019-t-30m.outReading graph from graphs/expander4.graph
Reading a graph with V 4E 16
16
4
H expansion: 0, num cross: 0
H conductance: -nan, num cross: 0
H_single expansion: 0, num cross: 0
H_single conductance: -nan, num cross: 0
Cap 1 ... flow: 8 (1.8e-05 s)
Flow search took (seconds) 3.7e-05
SUBG cut conductance: 999
SUBG cut minside volume 0
SUBG cut maxside volume 24
== End round 0 ==
H expansion: 0, num cross: 0
H conductance: 0, num cross: 0
H_single expansion: 0, num cross: 0
H_single conductance: 0, num cross: 0
Cap 1 ... flow: 8 (1.9e-05 s)
Flow search took (seconds) 3.6e-05
SUBG cut conductance: 999
SUBG cut minside volume 0
SUBG cut maxside volume 24
== End round 1 ==
H expansion: 0.5, num cross: 4
H conductance: 0.25, num cross: 4
H_single expansion: 0.5, num cross: 4
H_single conductance: 0.25, num cross: 4
Cap 1 ... flow: 4 (1.5e-05 s)
Cap 2 ... flow: 8 (1.8e-05 s)
Flow search took (seconds) 6.9e-05
SUBG cut conductance: 0.333333
SUBG cut minside volume 12
SUBG cut maxside volume 12
== End round 2 ==
H Conductance target reached, this will be case 1 or 3. According to theory, this means we probably won't find a better cut. That is, assuming you set H_phi right. If was used together with G_phi target, this also certifies the input graph is a G_phi expander unless there was a very unbaanced cut somewhere, which we will proceed to look for.
R0 cond 999
R1 cond 999
R2 cond 0.333333
The best with best expansion was found on round2
final_Edge crossings (E) : 4
final_cut size: ( 2 | 2 )
diff: 0 (factor 0 of total n vertices)
final_cut volumes: ( 12 | 12 )
final_expansion: 2
final_conductance: 0.333333
CASE3 Found goodenough but very unbalanced cut.
